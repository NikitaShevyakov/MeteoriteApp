// <auto-generated />
using System;
using MeteoriteApp.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MeteoriteApp.Infrastructure.Migrations
{
    [DbContext(typeof(MeteoriteDbContext))]
    partial class MeteoriteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MeteoriteApp.Infrastructure.Database.Entities.Meteorites.CategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("T_MeteoriteCategories", (string)null);
                });

            modelBuilder.Entity("MeteoriteApp.Infrastructure.Database.Entities.Meteorites.ClassificationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_T_MeteoriteClassifications_Name");

                    b.ToTable("T_MeteoriteClassifications", (string)null);
                });

            modelBuilder.Entity("MeteoriteApp.Infrastructure.Database.Entities.Meteorites.DiscoveryStatusEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("T_MeteoriteDiscoveryStatuses", (string)null);
                });

            modelBuilder.Entity("MeteoriteApp.Infrastructure.Database.Entities.Meteorites.GeoLocationEntity", b =>
                {
                    b.Property<int>("MeteoriteId")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("MeteoriteId");

                    b.HasIndex("TypeId");

                    b.ToTable("T_MeteoriteGeoLocations", (string)null);
                });

            modelBuilder.Entity("MeteoriteApp.Infrastructure.Database.Entities.Meteorites.GeolocationTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("T_MeteoriteGeolocationTypes", (string)null);
                });

            modelBuilder.Entity("MeteoriteApp.Infrastructure.Database.Entities.Meteorites.MeteoriteEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateDiscovered")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscoveryStatusId")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<double>("Mass")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RawRegionByDistrict")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RawRegionByGeozone")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("DiscoveryStatusId");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_T_Meteorites_Name");

                    b.ToTable("T_Meteorites", (string)null);
                });

            modelBuilder.Entity("MeteoriteApp.Infrastructure.Database.Entities.Meteorites.GeoLocationEntity", b =>
                {
                    b.HasOne("MeteoriteApp.Infrastructure.Database.Entities.Meteorites.MeteoriteEntity", "Meteorite")
                        .WithOne("GeoLocation")
                        .HasForeignKey("MeteoriteApp.Infrastructure.Database.Entities.Meteorites.GeoLocationEntity", "MeteoriteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeteoriteApp.Infrastructure.Database.Entities.Meteorites.GeolocationTypeEntity", "Type")
                        .WithMany("GeoLocations")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Meteorite");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("MeteoriteApp.Infrastructure.Database.Entities.Meteorites.MeteoriteEntity", b =>
                {
                    b.HasOne("MeteoriteApp.Infrastructure.Database.Entities.Meteorites.CategoryEntity", "Category")
                        .WithMany("Meteorites")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MeteoriteApp.Infrastructure.Database.Entities.Meteorites.ClassificationEntity", "Classification")
                        .WithMany("Meteorites")
                        .HasForeignKey("ClassificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MeteoriteApp.Infrastructure.Database.Entities.Meteorites.DiscoveryStatusEntity", "DiscoveryStatus")
                        .WithMany("Meteorites")
                        .HasForeignKey("DiscoveryStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Classification");

                    b.Navigation("DiscoveryStatus");
                });

            modelBuilder.Entity("MeteoriteApp.Infrastructure.Database.Entities.Meteorites.CategoryEntity", b =>
                {
                    b.Navigation("Meteorites");
                });

            modelBuilder.Entity("MeteoriteApp.Infrastructure.Database.Entities.Meteorites.ClassificationEntity", b =>
                {
                    b.Navigation("Meteorites");
                });

            modelBuilder.Entity("MeteoriteApp.Infrastructure.Database.Entities.Meteorites.DiscoveryStatusEntity", b =>
                {
                    b.Navigation("Meteorites");
                });

            modelBuilder.Entity("MeteoriteApp.Infrastructure.Database.Entities.Meteorites.GeolocationTypeEntity", b =>
                {
                    b.Navigation("GeoLocations");
                });

            modelBuilder.Entity("MeteoriteApp.Infrastructure.Database.Entities.Meteorites.MeteoriteEntity", b =>
                {
                    b.Navigation("GeoLocation")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
